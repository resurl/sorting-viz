{"version":3,"sources":["Algorithms/animation.ts","Algorithms/quicksort.ts","Algorithms/algorithms.ts","Algorithms/insertionsort.ts","Algorithms/mergesort.ts","Components/Bar.tsx","Components/Visualizer.tsx","Components/Toolbar/Button.tsx","Components/Toolbar/AlgorithmSelect.tsx","App.tsx","Components/Toolbar/ScaleSlider.tsx","serviceWorker.ts","index.tsx"],"names":["State","Animate","index","current","val","state","idx","curr","value","animation","this","orig","list","Unsorted","idx1","idx2","queue","push","create","Compared","Sorted","j","length","Error","init","arr","map","quickSortHelper","items","left","right","pivot","Math","floor","i","swap","partition","data","ptr","Cursor","sort","sorted","len","buffer","sz","pos","min","leftBound","rightBound","temp","initBar","anim","height","backgroundColor","width","margin","borderRadius","Bar","props","className","style","colorMap","base","greenDiff","greenMap","parseInt","substr","toString","Visualizer","bars","positions","newArray","bind","genArrayBars","animate","scale","prevProps","playUpdated","play","resetUpdated","reset","size","random","setState","slice","copy","a","b","indexOf","res","key","animations","Algorithms","algo","buttons","document","getElementsByClassName","disabled","barElms","id","setInterval","ani_state","shift","posis","clearInterval","React","Component","Button","handleClick","e","clickCallback","behaviour","onClick","AlgorithmSelect","onAlgoChange","onChange","target","Algo","ScaleSlider","handleChange","onScaleChange","type","max","App","numObjects","algorithm","Merge","handlePlay","handleReset","handleAlgorithm","handleScale","convertAlgoToString","fn","setTimeout","Insertion","Quick","optionBar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0aea927.chunk.js","sourcesContent":["export enum State { Unsorted='#3389eb', Sorted='#66d3fa', Cursor='#d5f3fe', Compared='#2565ae' };\r\n/**\r\n *  Represents an animation state\r\n *  idx: the original position of an object\r\n *  value: the value of the object\r\n *  animation: the animation status of the object\r\n */\r\nexport class Animate {\r\n    private idx: number         // should remain unchanged from initialization\r\n    private curr: number\r\n    private value: number\r\n    private animation: State    \r\n    public constructor(index:number, current: number, val:number, state: State) {\r\n        this.idx = index;\r\n        this.curr = current;\r\n        this.value = val;\r\n        this.animation = state;\r\n    }\r\n\r\n    public get index() : number {\r\n        return this.idx\r\n    }\r\n\r\n    public get current() : number {\r\n        return this.curr\r\n    }\r\n\r\n    public get val() : number {\r\n        return this.value\r\n    }\r\n\r\n    public get state() : State {\r\n        return this.animation\r\n    }\r\n\r\n    // create new animation information based on a previously unchanged object\r\n    static copy(orig: Animate, state?: State) {\r\n        return new Animate(orig.index,orig.current, orig.val, state as State)\r\n    }\r\n\r\n    // create new Animation information from initial animation state in list\r\n    static create(list: Animate[], idx: number, state:State=State.Unsorted) {\r\n        return new Animate(list[idx].idx,idx,list[idx].val,state)\r\n    }\r\n\r\n    /**\r\n     * Animates a swap operation\r\n     * @param list list containing initial animation information\r\n     * @param idx1 first idx to be swapped\r\n     * @param idx2 second idx to be swapped\r\n     * @param queue list that must be returned by sort function\r\n     */\r\n    static swap(list: Animate[], idx1: number, idx2: number, queue: Animate[]) {\r\n        queue.push(Animate.create(list,idx1, State.Compared));\r\n        queue.push(Animate.create(list,idx2, State.Compared));\r\n        [list[idx1], list[idx2]] = [list[idx2],list[idx1]];\r\n        queue.push(Animate.create(list,idx1))\r\n        queue.push(Animate.create(list,idx2))\r\n    }\r\n\r\n    /**\r\n     * Create animation that visually asserts a sorted array\r\n     * @param list list with init'd animation steps\r\n     * @param queue queue that must be returned by sort function\r\n     */\r\n    static assertSort(list:Animate[], queue: Animate[]) {\r\n        queue.push(Animate.create(list,0,State.Sorted))\r\n        for (let j = 1; j < list.length; j++) {\r\n            if (list[j-1].val > list[j].val)\r\n                throw new Error('Array not sorted!')\r\n            queue.push(Animate.create(list,j,State.Sorted))\r\n        }\r\n    }\r\n}\r\n\r\n// init array to have original state {idx, value, Unsorted}\r\nexport function init(arr: number[]): Animate[] {\r\n    let animationArray:Animate[] = arr.map((val, idx) => new Animate(idx, idx, val, State.Unsorted))\r\n    return animationArray\r\n}"," import { Animate, init } from './animation'\r\nfunction partition(items: Animate[], queue: Animate[], left: number, right: number) {\r\n    var pivot   = items[Math.floor((right + left) / 2)].val, //middle element\r\n        i       = left, //left pointer\r\n        j       = right; //right pointer\r\n    while (i <= j) {\r\n        while (items[i].val < pivot) \r\n            i++;\r\n        \r\n        while (items[j].val > pivot) \r\n            j--;\r\n        \r\n        if (i <= j) {\r\n            Animate.swap(items,i,j,queue)\r\n            i++;\r\n            j--;\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction quickSortHelper(items: Animate[], queue: Animate[], left:number, right:number) {\r\n    let index;\r\n    if (items.length > 1) {\r\n        index = partition(items, queue, left, right); //index returned from partition\r\n        if (left < index - 1)  //more elements on the left side of the pivot\r\n            quickSortHelper(items, queue, left, index - 1);\r\n        \r\n        if (index < right)  //more elements on the right side of the pivot\r\n            quickSortHelper(items, queue, index, right);\r\n        \r\n    }\r\n    return items;\r\n}\r\n\r\nfunction sort(arr: Animate[],queue:Animate[],data:number[]) {\r\n    quickSortHelper(arr,queue,0,arr.length-1)\r\n    //Animate.assertSort(arr,queue)\r\n    for (let i = 0; i < data.length; i++)\r\n        data[i] = arr[i].val\r\n    return queue\r\n}\r\n/**\r\n * Provides animation instructions for quick sorting an array\r\n * @param arr - the array of numbers to be sorted \r\n * @returns array of objects representing animation states\r\n */\r\nexport default function quickSort(arr: number[]): any[] {\r\n    let animations = init(arr)\r\n    let queue: Animate[] = []\r\n    sort(animations,queue,arr)\r\n    return queue \r\n} ","import insertionSort from './insertionsort'\r\nimport mergeSort from './mergesort'\r\nimport quickSort from './quicksort'\r\n\r\nexport default [insertionSort,mergeSort,quickSort]","import { Animate, State, init } from './animation'\r\n\r\n/**\r\n * Animates insertion sort. Runs through each step of insertion sort and adds the corresponding \r\n * animation state to a queue\r\n * \r\n * @param data initial animation states of number array\r\n * @param arr array to be sorted\r\n * @returns a queue of animation states\r\n */\r\nfunction sort(arr: Animate[], data: number[]): Animate[] {\r\n    let queue: Animate[] = []\r\n    for(let i = 0; i < arr.length; i++) {\r\n        let ptr = Animate.create(arr,i,State.Cursor) // keep track of the cursor.\r\n        queue.push(ptr)\r\n        for(let j = i; j > 0; j--) {\r\n            if (arr[j].val < arr[j-1].val) {\r\n                Animate.swap(arr,j-1,j,queue)\r\n                // if the cursor's state was overwritten, restore it\r\n                if (j===i)\r\n                    queue.push(Animate.create(arr,i))\r\n            }\r\n        }\r\n        queue.push(Animate.create(arr,i))\r\n    }\r\n\r\n    //Animate.assertSort(arr,queue)\r\n\r\n    for (let i = 0; i < arr.length; i++) \r\n        data[i] = arr[i].val\r\n\r\n    return queue;\r\n}\r\n\r\n\r\n/**\r\n * Provides steps to animate an insertion sorted collection\r\n * of data\r\n * @param arr  unsorted array to be animated\r\n * @returns  an array containing animation steps\r\n */\r\nexport default function insertionSort(arr: number[]): Animate[] {\r\n    let animationArr = init(arr)\r\n    return sort(animationArr, arr)\r\n}\r\n","import { Animate, State, init } from './animation'\r\n\r\nfunction sort(arr: Animate[], data: number[]): Animate[] {\r\n    let queue: Animate[] = []\r\n    let sorted: Animate[] = arr\r\n    let len: number = arr.length\r\n    let buffer: Animate[] = []\r\n    for (let sz = 1; sz < len; sz *= 2) {\r\n        for (let pos = 0; pos < len; pos += 2*sz) {\r\n            let left = pos,\r\n                right = Math.min(left+sz, len),\r\n                leftBound = right,\r\n                rightBound = Math.min(right+sz, len),\r\n                i = left\r\n            while (left < leftBound && right < rightBound) {\r\n                if (sorted[left].val < sorted[right].val) {\r\n                    queue.push(new Animate(sorted[left].index,i,sorted[left].val,State.Compared))\r\n                    buffer[i] = sorted[left]\r\n                    queue.push(new Animate(buffer[i].index,i,buffer[i].val,State.Unsorted))\r\n                    i++\r\n                    left++\r\n                }\r\n                else {\r\n                    queue.push(new Animate(sorted[right].index,i,sorted[right].val,State.Compared))\r\n                    buffer[i] = sorted[right]\r\n                    queue.push(new Animate(buffer[i].index,i,buffer[i].val,State.Unsorted))\r\n                    i++\r\n                    right++\r\n                }\r\n            }\r\n            \r\n            while (left < leftBound) {\r\n                queue.push(new Animate(sorted[left].index,i,sorted[left].val,State.Compared))\r\n                buffer[i] = sorted[left]\r\n                queue.push(new Animate(buffer[i].index,i,buffer[i].val,State.Unsorted))\r\n                i++\r\n                left++\r\n            }\r\n\r\n            while (right < rightBound){\r\n                queue.push(new Animate(sorted[right].val,i,sorted[right].val,State.Compared))\r\n                buffer[i] = sorted[right]\r\n                queue.push(new Animate(buffer[i].index,i,buffer[i].val,State.Unsorted))    \r\n                i++\r\n                right++\r\n            }\r\n        }\r\n        let temp = sorted\r\n        sorted = buffer\r\n        buffer = temp\r\n    }\r\n\r\n    //Animate.assertSort(arr,queue)\r\n    for (let i = 0; i < data.length; i++)\r\n        data[i] = arr[i].val\r\n\r\n    return queue\r\n}\r\n\r\n/**\r\n * Provides animation instructions for merge sorting an array\r\n * @param arr - the array of numbers to be sorted \r\n * @returns array of objects representing animation states\r\n */\r\n \r\nexport default function mergesort(arr: number[]): any[] {\r\n    let animations = init(arr)\r\n    return sort(animations, arr)\r\n}","import React from 'react'\r\n\r\nfunction initBar(value: number, anim: string): object {\r\n    const barHeight: number = value/10;\r\n    return ({\r\n        height: barHeight + '%',\r\n        backgroundColor: anim,\r\n        width: '100%',\r\n        margin: '0 0%',\r\n        borderRadius: '0.5em 0.5em 0 0'\r\n    });\r\n}\r\n\r\ninterface DataProperty {\r\n    value: number,\r\n    animation: string\r\n}\r\n\r\nexport default function Bar(props: DataProperty) {\r\n    const { value, animation } = props\r\n\r\n    return (\r\n        <div className=\"Bar\" style={initBar(value,animation)}></div>\r\n    );\r\n}","import Algorithms from '../Algorithms/algorithms'\r\nimport { Animate, State } from '../Algorithms/animation' \r\nimport Bar from './Bar'\r\nimport React from 'react'\r\n\r\ninterface VisualizerProps {\r\n    scale: number,\r\n    algo: number,\r\n    play: boolean,\r\n    reset: boolean\r\n}\r\n\r\ninterface VisualizerState {\r\n    data: number[],\r\n    bars: JSX.Element[],\r\n    positions: number[]\r\n}\r\n\r\nconst begColor = '#336aeb',\r\n    begGreen = 0x6a,\r\n    endGreen = 0xeb,\r\n    endColor = '#33ebeb'\r\n\r\nconst colorMap = (idx: number, len: number, state: State): string => {\r\n    if (state === State.Unsorted) {\r\n        let gap = (endGreen - begGreen) / len,\r\n            base = begColor,\r\n            greenDiff = idx*gap,\r\n            greenMap = Math.floor(parseInt(base.substr(3,2),16) + greenDiff),\r\n            color = base.substr(0,3) + greenMap.toString(16) + base.substr(5,2)\r\n        return color\r\n    }\r\n    else {\r\n        return state\r\n    }\r\n} \r\n\r\nexport default class Visualizer extends React.Component<VisualizerProps,VisualizerState> {\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.state = {\r\n            data: [],\r\n            bars: [],\r\n            positions: []\r\n        }\r\n\r\n        this.newArray = this.newArray.bind(this)\r\n        this.genArrayBars = this.genArrayBars.bind(this)\r\n        this.animate = this.animate.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        this.newArray(this.props.scale)\r\n    }\r\n\r\n    componentDidUpdate(prevProps: any) {\r\n        let playUpdated = (this.props.play !== prevProps.play)\r\n        let resetUpdated = (this.props.reset !== prevProps.reset)\r\n        if (playUpdated && this.props.play) {\r\n            this.animate()\r\n        } else if (resetUpdated && this.props.reset && !playUpdated) {\r\n            this.newArray(this.props.scale)\r\n        }\r\n    }\r\n\r\n    newArray(size: number) {\r\n        const arr = [];\r\n        for(let i = 0; i < size; i++)\r\n            arr.push(Math.floor(Math.random()*(1000-5)+5));\r\n        this.setState({data: arr})\r\n        this.genArrayBars(arr)\r\n    }\r\n\r\n    genArrayBars(arr: number[]) {\r\n        // get a sorted array so that we can know where they lie after being sorted\r\n        let sorted = arr.slice();\r\n        let copy = arr.slice()\r\n        sorted = sorted.sort((a,b) => a-b);\r\n        let pos = copy.map( (val) => sorted.indexOf(val))\r\n        this.setState({positions: pos}) \r\n        \r\n        // generate the JSX\r\n        // color mapping should be relative to its height\r\n        let res = arr.map( (val,idx) => \r\n        <Bar value={val} animation={colorMap(sorted.indexOf(val),arr.length,State.Unsorted)} key={idx} />);\r\n        this.setState({bars: res})\r\n    }\r\n\r\n    animate() {\r\n        let animations = Algorithms[this.props.algo](this.state.data)\r\n        let buttons = document.getElementsByClassName('Button') as HTMLCollectionOf<HTMLButtonElement> \r\n        for (let i = 0; i < buttons.length; i++)\r\n            buttons[i].disabled = true\r\n        let barElms = document.getElementsByClassName('Bar') as HTMLCollectionOf<HTMLElement>\r\n        let id = setInterval(() => {\r\n            if (animations.length) {\r\n                let ani_state = animations.shift() as Animate\r\n                let curr = ani_state.current\r\n                let idx = ani_state.index\r\n                let posis = this.state.positions\r\n                barElms[curr].style.backgroundColor=colorMap(posis[idx],barElms.length,ani_state.state);\r\n                barElms[curr].style.height = (ani_state.val/10) + '%'    \r\n            } else {\r\n                for (let i = 0; i <buttons.length; i++)\r\n                    buttons[i].disabled = false\r\n                clearInterval(id)\r\n            }\r\n        }, 10) \r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        //const bars = this.genArrayBars(this.state.data)\r\n        return (\r\n            <div className=\"Visualizer\">\r\n                <div className=\"Visualizer__wrapper\">\r\n                    {this.state.bars}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n} \r\n","import React from 'react'\r\n\r\ninterface Props {\r\n    behaviour: string,\r\n    clickCallback: Function\r\n}\r\n\r\nexport default class Button extends React.Component<Props,{}> {\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    handleClick(e: any) {\r\n        this.props.clickCallback()\r\n    }\r\n\r\n\r\n    render() {\r\n        const behaviour = this.props.behaviour\r\n        return (\r\n            <button className='Button' onClick={this.handleClick}>\r\n                {behaviour}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\ninterface Props {\r\n    onAlgoChange: Function,\r\n    algo: number\r\n}\r\n\r\nexport default function AlgorithmSelect(props: Props) {\r\n    const {onAlgoChange, algo} = props\r\n\r\n    const handleChange = (e: any) => {\r\n        onAlgoChange(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <select value={algo} className='AlgoSelect' onChange={handleChange}>\r\n            <option className='AlgoSelect_op' value='0'>Insertion</option>\r\n            <option className='AlgoSelect_op' value='1'>Merge</option>\r\n            <option className='AlgoSelect_op' value='2'>Quick</option>\r\n        </select>\r\n\r\n    )\r\n}\r\n","import React from 'react';\nimport Visualizer from './Components/Visualizer'\nimport Button from './Components/Toolbar/Button';\nimport AlgorithmSelect from './Components/Toolbar/AlgorithmSelect'\nimport ScaleSlider from './Components/Toolbar/ScaleSlider'\nimport './App.css';\nimport './Styles/main.css'\n\nenum Algo { Insertion, Merge, Quick }\n\ninterface AppState {\n  numObjects: number,\n  algorithm: Algo,\n  play: boolean,\n  reset: boolean\n}\n\nexport class App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      numObjects: 25,\n      algorithm: Algo.Merge,\n      play: false,\n      reset: false\n    }\n    this.handlePlay = this.handlePlay.bind(this)\n    this.handleReset = this.handleReset.bind(this)\n    this.handleAlgorithm = this.handleAlgorithm.bind(this)\n    this.handleScale = this.handleScale.bind(this)\n    this.convertAlgoToString = this.convertAlgoToString.bind(this)\n  }\n    \n  handlePlay(fn: Function) {\n    this.setState({play: true})\n    setTimeout( () => this.setState({play: false}),500)\n  }\n\n  handleReset(fn: Function) {\n    this.setState({reset: true, play: false})\n    setTimeout( () => this.setState({reset: false}), 500)\n  }\n\n  handleScale(val: number) {\n    this.setState({ numObjects: val })\n  }\n\n  handleAlgorithm(val: number) {\n    this.setState({algorithm: val})\n  }\n\n  convertAlgoToString(algo: Algo) {\n    switch(algo) {\n      case Algo.Insertion: return 'insertion'\n      case Algo.Merge: return 'merge'\n      case Algo.Quick: return 'quick'\n    }\n  }\n\n\n  render() {\n    const numObjects = this.state.numObjects\n    const algorithm = this.state.algorithm\n    const play = this.state.play\n    const reset = this.state.reset\n\n    const optionBar = (\n      <div className=\"OptionBar\">\n        <ScaleSlider onScaleChange={this.handleScale} value={numObjects} />\n        <AlgorithmSelect onAlgoChange={this.handleAlgorithm} algo={this.state.algorithm}/> \n        <Button behaviour='Reset' clickCallback={this.handleReset} /> \n        <Button behaviour='Play' clickCallback={this.handlePlay} /> \n      </div>\n    )\n\n    return (\n      <div className=\"App\">\n        {optionBar}\n        <Visualizer scale={numObjects} algo={algorithm} play={play} reset={reset} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react'\r\n\r\ninterface Props {\r\n    onScaleChange: Function,\r\n    value: number\r\n}\r\n\r\n\r\nexport default class ScaleSlider extends React.Component<Props,{}> {\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    handleChange(e: any) {\r\n        this.props.onScaleChange(e.target.value)\r\n    }\r\n\r\n    render() {\r\n        const value = this.props.value \r\n\r\n        return (\r\n            <div className=\"ScaleSlider\">\r\n                <input type='range' \r\n                    min='5' \r\n                    max='150' \r\n                    className='slider'\r\n                    onChange={this.handleChange}\r\n                    />\r\n                <p className='ScaleSlider__text'>{value}</p>\r\n            </div>\r\n        )\r\n    } \r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}