{"version":3,"sources":["Algorithms/animation.ts","Algorithms/quicksort.ts","Algorithms/algorithms.ts","Algorithms/insertionsort.ts","Algorithms/mergesort.ts","Components/Bar.tsx","Components/Visualizer.tsx","Components/Toolbar/Button.tsx","Components/Toolbar/AlgorithmSelect.tsx","App.tsx","Components/Toolbar/ScaleSlider.tsx","serviceWorker.ts","index.tsx"],"names":["State","Animate","index","val","state","idx","value","animation","this","orig","list","idx1","idx2","queue","push","Compared","Unsorted","init","arr","map","quickSortHelper","items","left","right","length","pivot","Math","floor","i","j","swap","partition","data","ptr","Cursor","Sorted","Error","sort","sorted","len","buffer","sz","pos","min","leftBound","rightBound","temp","initBar","anim","height","backgroundColor","width","margin","Bar","props","className","style","Visualizer","bars","newArray","bind","genArrayBars","animate","scale","prevProps","playUpdated","play","resetUpdated","reset","size","random","setState","res","key","barElms","document","getElementsByClassName","animations","Algorithms","algo","buttons","disabled","id","setInterval","ani_state","shift","clearInterval","React","Component","Button","handleClick","e","clickCallback","behaviour","onClick","AlgorithmSelect","onAlgoChange","onChange","target","Algo","ScaleSlider","handleChange","onScaleChange","type","max","App","numObjects","algorithm","Merge","handlePlay","handleReset","handleAlgorithm","handleScale","convertAlgoToString","fn","setTimeout","Insertion","Quick","optionBar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4ba5dbe6.chunk.js","sourcesContent":["export enum State { Unsorted='#3c99dc', Sorted='#66d3fa', Cursor='#d5f3fe', Compared='#2565ae' };\r\n/**\r\n *  Represents an animation state\r\n *  idx: the original position of an object\r\n *  value: the value of the object\r\n *  animation: the animation status of the object\r\n */\r\nexport class Animate {\r\n    private idx: number         // should remain unchanged from initialization\r\n    private value: number\r\n    private animation: State    \r\n    public constructor(index:number, val:number, state: State) {\r\n        this.idx = index;\r\n        this.value = val;\r\n        this.animation = state;\r\n    }\r\n\r\n    public get index() : number {\r\n        return this.idx\r\n    }\r\n\r\n    public get val() : number {\r\n        return this.value\r\n    }\r\n\r\n    public get state() : State {\r\n        return this.animation\r\n    }\r\n\r\n    // create new animation information based on a previously unchanged object\r\n    static copy(orig: Animate, state?: State) {\r\n        return new Animate(orig.index, orig.val, state as State)\r\n    }\r\n\r\n    // create new animation Step\r\n    static swap(list: Animate[], idx1: number, idx2: number, queue: Animate[]) {\r\n        queue.push(new Animate(idx1,list[idx1].val,State.Compared));\r\n        queue.push(new Animate(idx2,list[idx2].val,State.Compared));\r\n        [list[idx1], list[idx2]] = [list[idx2],list[idx1]];\r\n        queue.push(new Animate(idx1,list[idx1].val,State.Unsorted));\r\n        queue.push(new Animate(idx2,list[idx2].val,State.Unsorted))\r\n    }\r\n}\r\n\r\n// init array to have original state {idx, value, Unsorted}\r\nexport function init(arr: number[]): Animate[] {\r\n    let animationArray:Animate[] = arr.map((val, idx) => new Animate(idx, val, State.Unsorted))\r\n    return animationArray\r\n}","import { Animate, State, init } from './animation'\r\n// for each of the algorithms, we want to return a tuple [index, value, state]\r\n// each data bar that is affected by the algorithm will change state somehow\r\n\r\nfunction partition(items: Animate[], queue: Animate[], left: number, right: number) {\r\n    var pivot   = items[Math.floor((right + left) / 2)].val, //middle element\r\n        i       = left, //left pointer\r\n        j       = right; //right pointer\r\n    while (i <= j) {\r\n        while (items[i].val < pivot) \r\n            i++;\r\n        \r\n        while (items[j].val > pivot) \r\n            j--;\r\n        \r\n        if (i <= j) {\r\n            Animate.swap(items,i,j,queue)\r\n            i++;\r\n            j--;\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction quickSortHelper(items: Animate[], queue: Animate[], left:number, right:number) {\r\n    let index;\r\n    if (items.length > 1) {\r\n        index = partition(items, queue, left, right); //index returned from partition\r\n        if (left < index - 1)  //more elements on the left side of the pivot\r\n            quickSortHelper(items, queue, left, index - 1);\r\n        \r\n        if (index < right)  //more elements on the right side of the pivot\r\n            quickSortHelper(items, queue, index, right);\r\n        \r\n    }\r\n    return items;\r\n}\r\n\r\nfunction sort(arr: Animate[],queue:Animate[],data:number[]) {\r\n    quickSortHelper(arr,queue,0,arr.length-1)\r\n    for (let i = 1; i < arr.length; i++) {\r\n        if (arr[i].val < arr[i-1].val)\r\n            throw new Error('Array not sorted')\r\n    }\r\n\r\n    for(let i = 0; i< arr.length;i++) {\r\n        queue.push(new Animate(i,arr[i].val,State.Sorted))\r\n        data[i] = arr[i].val\r\n    }\r\n    return queue\r\n}\r\n/**\r\n * Provides animation instructions for quick sorting an array\r\n * @param arr - the array of numbers to be sorted \r\n * @returns array of objects representing animation states\r\n */\r\nexport default function quickSort(arr: number[]): any[] {\r\n    let animations = init(arr)\r\n    let queue: Animate[] = []\r\n    sort(animations,queue,arr)\r\n    return queue \r\n}","import insertionSort from './insertionsort'\r\nimport mergeSort from './mergesort'\r\nimport quickSort from './quicksort'\r\n\r\nexport default [insertionSort,mergeSort,quickSort]","import { Animate, State, init } from './animation'\r\n\r\n/**\r\n * Animates insertion sort. Runs through each step of insertion sort and adds the corresponding \r\n * animation state to a queue\r\n * \r\n * @param data initial animation states of number array\r\n * @param arr array to be sorted\r\n * @returns a queue of animation states\r\n */\r\nfunction sort(arr: Animate[], data: number[]): Animate[] {\r\n    let queue: Animate[] = []\r\n    for(let i = 0; i < arr.length; i++) {\r\n        let ptr = new Animate(i, arr[i].val, State.Cursor) // keep track of the cursor.\r\n        queue.push(ptr)\r\n        for(let j = i; j > 0; j--) {\r\n            if (arr[j].val < arr[j-1].val) {\r\n                // keep track of what's being switched\r\n                /* let jSwap = new Animate(j-1, arr[j].val, State.Compared)\r\n                let prevJswap = new Animate(j, arr[j-1].val, State.Compared)\r\n                queue.push(jSwap)\r\n                queue.push(prevJswap)\r\n                \r\n                swap(arr,j,j-1)\r\n                \r\n                // elements are switched, move on to next pair\r\n                queue.push(Animate.copy(jSwap, State.Unsorted))\r\n                queue.push(Animate.copy(prevJswap, State.Unsorted)) */\r\n\r\n                Animate.swap(arr,j-1,j,queue)\r\n                \r\n                // if the cursor's state was overwritten, restore it\r\n                if (j===i)\r\n                    queue.push(new Animate(i, arr[i].val,State.Cursor))\r\n            }\r\n        }\r\n        queue.push(new Animate(i, arr[i].val, State.Unsorted))\r\n        \r\n    }\r\n    \r\n    // assert that everything is sorted\r\n    queue.push(new Animate(0, arr[0].val, State.Sorted))\r\n    for (let j = 1; j < arr.length; j++) {\r\n        if (arr[j-1] > arr[j])\r\n            throw new Error('Array not sorted!')\r\n        queue.push(new Animate(j, arr[j].val, State.Sorted))\r\n    }\r\n\r\n    for (let i = 0; i < arr.length; i++) \r\n        data[i] = arr[i].val\r\n    \r\n    // for debug\r\n    // console.log(queue)\r\n\r\n    return queue;\r\n}\r\n\r\nconst swap = (list: Animate[], i: number, j: number) => {\r\n    [list[i], list[j]] = [list[j], list[i]];\r\n}\r\n\r\n/**\r\n * Provides steps to animate an insertion sorted collection\r\n * of data\r\n * @param arr  unsorted array to be animated\r\n * @returns  an array containing animation steps\r\n */\r\nexport default function insertionSort(arr: number[]): Animate[] {\r\n    let animationArr = init(arr)\r\n    return sort(animationArr, arr)\r\n}\r\n","import { Animate, State, init } from './animation'\r\n\r\nfunction sort(arr: Animate[], data: number[]): Animate[] {\r\n    let queue: Animate[] = []\r\n    let sorted: Animate[] = arr\r\n    let len: number = arr.length\r\n    let buffer: Animate[] = []\r\n    for (let sz = 1; sz < len+len; sz *= 2) {\r\n        for (let pos = 0; pos < len; pos += 2*sz) {\r\n            let left = pos,\r\n                right = Math.min(left+sz, len),\r\n                leftBound = right,\r\n                rightBound = Math.min(right+sz, len),\r\n                i = left\r\n            while (left < leftBound && right < rightBound) {\r\n                if (sorted[left].val < sorted[right].val) {\r\n                    queue.push(new Animate(left,sorted[i].val,State.Compared))\r\n                    buffer[i] = sorted[left]\r\n                    queue.push(new Animate(left,buffer[i].val,State.Unsorted))\r\n                    i++\r\n                    left++\r\n                }\r\n                else {\r\n                    queue.push(new Animate(right,sorted[i].val,State.Compared))\r\n                    buffer[i] = sorted[right]\r\n                    queue.push(new Animate(right,buffer[i].val,State.Unsorted))\r\n                    i++\r\n                    right++\r\n                }\r\n            }\r\n            \r\n            while (left < leftBound) {\r\n                queue.push(new Animate(left,sorted[i].val,State.Compared))\r\n                buffer[i] = sorted[left]\r\n                queue.push(new Animate(left,buffer[i].val,State.Unsorted))\r\n                i++\r\n                left++\r\n            }\r\n\r\n            while (right < rightBound){\r\n                queue.push(new Animate(right,sorted[i].val,State.Compared))\r\n                buffer[i] = sorted[right]\r\n                queue.push(new Animate(right,buffer[i].val,State.Unsorted))    \r\n                i++\r\n                right++\r\n            }\r\n        }\r\n        let temp = sorted\r\n        sorted = buffer\r\n        buffer = temp\r\n    }\r\n\r\n    for (let i = 0; i < sorted.length; i++) {\r\n        queue.push(new Animate(i,sorted[i].val,State.Sorted))\r\n        data[i] = sorted[i].val\r\n    }\r\n\r\n    return queue\r\n}\r\n\r\n/**\r\n * Provides animation instructions for merge sorting an array\r\n * @param arr - the array of numbers to be sorted \r\n * @returns array of objects representing animation states\r\n */\r\nexport default function mergesort(arr: number[]): any[] {\r\n    let animations = init(arr)\r\n    return sort(animations, arr)\r\n}","import React from 'react'\r\n\r\nfunction initBar(value: number, anim: string): object {\r\n    const barHeight: number = value/10;\r\n    return ({\r\n        height: barHeight + '%',\r\n        backgroundColor: anim,\r\n        width: '100%',\r\n        margin: '0 0.1%'\r\n    });\r\n}\r\n\r\ninterface DataProperty {\r\n    value: number,\r\n    animation: string\r\n}\r\n\r\nexport default function Bar(props: DataProperty) {\r\n    const { value, animation } = props\r\n\r\n    return (\r\n        <div className=\"Bar\" style={initBar(value,animation)}></div>\r\n    );\r\n}","import Algorithms from '../Algorithms/algorithms'\r\nimport { Animate, State } from '../Algorithms/animation' \r\nimport Bar from './Bar'\r\nimport React from 'react'\r\n\r\ninterface VisualizerProps {\r\n    scale: number,\r\n    algo: number,\r\n    play: boolean,\r\n    reset: boolean\r\n}\r\n\r\ninterface VisualizerState {\r\n    data: number[],\r\n    bars: JSX.Element[]\r\n}\r\n\r\nexport default class Visualizer extends React.Component<VisualizerProps,VisualizerState> {\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.state = {\r\n            data: [],\r\n            bars: []\r\n        }\r\n\r\n        this.newArray = this.newArray.bind(this)\r\n        this.genArrayBars = this.genArrayBars.bind(this)\r\n        this.animate = this.animate.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        this.newArray(this.props.scale)\r\n    }\r\n\r\n    componentDidUpdate(prevProps: any) {\r\n        let playUpdated = (this.props.play !== prevProps.play)\r\n        let resetUpdated = (this.props.reset !== prevProps.reset)\r\n        if (playUpdated && this.props.play) {\r\n            this.animate()\r\n        } else if (resetUpdated && this.props.reset && !playUpdated) {\r\n            this.newArray(this.props.scale)\r\n        }\r\n    }\r\n\r\n    newArray(size: number) {\r\n        const arr = [];\r\n        for(let i = 0; i < size; i++)\r\n            arr.push(Math.floor(Math.random()*(1000-5)+5));\r\n        this.setState({data: arr})\r\n        this.genArrayBars(arr)\r\n    }\r\n\r\n    genArrayBars(arr: number[]) {\r\n        let res = arr.map( (val,idx) => \r\n        <Bar value={val} animation={State.Unsorted} key={idx} />);\r\n        this.setState({bars: res})\r\n        \r\n        let barElms = document.getElementsByClassName('Bar') as HTMLCollectionOf<HTMLElement>\r\n        for (let i = 0; i < barElms.length; i++)\r\n            barElms[i].style.backgroundColor = State.Unsorted\r\n    }\r\n\r\n    animate() {\r\n        let animations = Algorithms[this.props.algo](this.state.data)\r\n        let buttons = document.getElementsByClassName('Button') as HTMLCollectionOf<HTMLButtonElement> \r\n        for (let i = 0; i < buttons.length; i++)\r\n            buttons[i].disabled = true\r\n        let barElms = document.getElementsByClassName('Bar') as HTMLCollectionOf<HTMLElement>\r\n        let id = setInterval(() => {\r\n            if (animations.length) {\r\n                let ani_state = animations.shift() as Animate\r\n                let idx = ani_state.index\r\n                barElms[idx].style.backgroundColor=ani_state.state\r\n                barElms[idx].style.height = (ani_state.val/10) + '%'    \r\n            } else {\r\n                for (let i = 0; i <buttons.length; i++)\r\n                    buttons[i].disabled = false\r\n                clearInterval(id)\r\n            }\r\n        }, 1) \r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        //const bars = this.genArrayBars(this.state.data)\r\n        return (\r\n            <div className=\"Visualizer\">\r\n                <div className=\"Visualizer__wrapper\">\r\n                    {this.state.bars}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n} \r\n","import React from 'react'\r\n\r\ninterface Props {\r\n    behaviour: string,\r\n    clickCallback: Function\r\n}\r\n\r\nexport default class Button extends React.Component<Props,{}> {\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    handleClick(e: any) {\r\n        this.props.clickCallback()\r\n    }\r\n\r\n\r\n    render() {\r\n        const behaviour = this.props.behaviour\r\n        return (\r\n            <button className='Button' onClick={this.handleClick}>\r\n                {behaviour}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\ninterface Props {\r\n    onAlgoChange: Function,\r\n    algo: number\r\n}\r\n\r\nexport default function AlgorithmSelect(props: Props) {\r\n    const {onAlgoChange, algo} = props\r\n\r\n    const handleChange = (e: any) => {\r\n        onAlgoChange(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <select value={algo} className='AlgoSelect' onChange={handleChange}>\r\n            <option className='AlgoSelect_op' value='0'>Insertion</option>\r\n            <option className='AlgoSelect_op' value='1'>Merge</option>\r\n            <option className='AlgoSelect_op' value='2'>Quick</option>\r\n        </select>\r\n\r\n    )\r\n}\r\n","import React from 'react';\nimport Visualizer from './Components/Visualizer'\nimport Button from './Components/Toolbar/Button';\nimport AlgorithmSelect from './Components/Toolbar/AlgorithmSelect'\nimport ScaleSlider from './Components/Toolbar/ScaleSlider'\nimport './App.css';\nimport './Styles/main.css'\n\nenum Algo { Insertion, Merge, Quick }\n\ninterface AppState {\n  numObjects: number,\n  algorithm: Algo,\n  play: boolean,\n  reset: boolean\n}\n\nexport class App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      numObjects: 25,\n      algorithm: Algo.Merge,\n      play: false,\n      reset: false\n    }\n    this.handlePlay = this.handlePlay.bind(this)\n    this.handleReset = this.handleReset.bind(this)\n    this.handleAlgorithm = this.handleAlgorithm.bind(this)\n    this.handleScale = this.handleScale.bind(this)\n    this.convertAlgoToString = this.convertAlgoToString.bind(this)\n  }\n    \n  handlePlay(fn: Function) {\n    this.setState({play: true})\n    setTimeout( () => this.setState({play: false}),500)\n  }\n\n  handleReset(fn: Function) {\n    this.setState({reset: true, play: false})\n    setTimeout( () => this.setState({reset: false}), 500)\n  }\n\n  handleScale(val: number) {\n    this.setState({ numObjects: val })\n  }\n\n  handleAlgorithm(val: number) {\n    this.setState({algorithm: val})\n  }\n\n  convertAlgoToString(algo: Algo) {\n    switch(algo) {\n      case Algo.Insertion: return 'insertion'\n      case Algo.Merge: return 'merge'\n      case Algo.Quick: return 'quick'\n    }\n  }\n\n\n  render() {\n    const numObjects = this.state.numObjects\n    const algorithm = this.state.algorithm\n    const play = this.state.play\n    const reset = this.state.reset\n\n    const optionBar = (\n      <div className=\"OptionBar\">\n        <ScaleSlider onScaleChange={this.handleScale} value={numObjects} />\n        <AlgorithmSelect onAlgoChange={this.handleAlgorithm} algo={this.state.algorithm}/> \n        <Button behaviour='Reset' clickCallback={this.handleReset} /> \n        <Button behaviour='Play' clickCallback={this.handlePlay} /> \n      </div>\n    )\n\n    return (\n      <div className=\"App\">\n        {optionBar}\n        <Visualizer scale={numObjects} algo={algorithm} play={play} reset={reset} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react'\r\n\r\ninterface Props {\r\n    onScaleChange: Function,\r\n    value: number\r\n}\r\n\r\n\r\nexport default class ScaleSlider extends React.Component<Props,{}> {\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    handleChange(e: any) {\r\n        this.props.onScaleChange(e.target.value)\r\n    }\r\n\r\n    render() {\r\n        const value = this.props.value \r\n\r\n        return (\r\n            <div className=\"ScaleSlider\">\r\n                <input type='range' \r\n                    min='5' \r\n                    max='150' \r\n                    className='slider'\r\n                    onChange={this.handleChange}\r\n                    />\r\n                <p className='ScaleSlider__text'>{value}</p>\r\n            </div>\r\n        )\r\n    } \r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}